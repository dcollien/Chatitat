{"name":"Chatitat","tagline":"A simple drop-in real-time chat jQuery plugin and service using redis Pub/Sub and socket.io","body":"Chat based on Node.js using Redis Pub/Sub + socket.io\r\n======================================================\r\n\r\nA simple real-time chat service and jQuery plugin using redis Pub/Sub and socket.io.\r\n\r\nSupports HMAC authentication, multiple chat rooms and chat history.\r\n\r\nHow to get the application running\r\n------------------------------------\r\n\r\n1. Install everything\r\n\r\n * <a href=\"http://redis.io\">Redis</a> must be installed and running.\r\n * <a href=\"http://nodejs.org\">Node.js</a> must be installed\r\n * Node.js plugin <a href=\"http://socket.io\">socket.io</a> installed (npm install socket.io).\r\n * Node.js plugin <a href=\"https://github.com/mranney/node_redis\">redis</a> installed (npm install hiredis redis).\r\n\r\n\r\n2. Start the service via:\r\n\r\n<code>$ node chatitat.js</code>\r\n\r\n\r\n3. Start the demonstration client via:\r\n\r\n<code>$ python -m SimpleHTTPServer</code>\r\n\r\nin the client/ directory\r\n\r\nSetting up the Client\r\n-----------------------\r\n\r\nThe browser client is a jQuery plugin. It requires jQuery and Socket.io (the socket.io-client js can be used, or the version served by the service at /socket.io/socket.io.js)\r\n\r\nThe jQuery plugin can be attached to an element as follows:\r\n\r\n    $('#chat').chatitat({\r\n        // optional authentication information (used if a shared secret is supplied to the service)\r\n        issued: \"1333333333337\", // timestamp at which the authentication was issued\r\n        signature: \"HASH\", // a base64 digest of a SHA256 HMAC using\r\n                           // the server's secret salt and userID + '|' + channel + '|' + issued\r\n        \r\n        // connection\r\n        userID: 'fred.flintstone',\r\n        userName: 'Fred Flintstone',\r\n        host: 'http://localhost:8020',\r\n        channel: 'bedrock',\r\n        \r\n        // callbacks, for convenience\r\n        errorCallback: function(msg, user, name, channel) {\r\n            console.log('Error', msg, user, name, channel);\r\n        },\r\n        sendCallback: function(msg, user, name, channel) {\r\n            console.log('Sending', msg, user, name, channel);\r\n        },\r\n        receiveCallback: function(msg, user, name, channel) {\r\n            console.log('Receiving', msg, user, name, channel);\r\n        }\r\n    });\r\n\r\n\r\nAuthentication\r\n---------------\r\n\r\nThe chat service uses a shared secret between the server hosting the browser client page and the chat service. This shared secret is never exposed to the client and is used as a salt to hash the user id, channel and issued timestamp using a SHA256 HMAC.\r\n\r\nThis hash signature is encoded as base64 and sent to the client, which can use this hash to prove the user id and channel are indeed those issued by the server (and not forgeries). The hash expires after the sessionLength specified in the service's settings.js file. This is policed by sending the time of issue as a unix timestamp (which is also part of the signature hash).\r\n\r\nThe shared secret is defined in settings.js:\r\n\r\ne.g.\r\n\r\n    module.exports = {\r\n        secret: 'some long secret shared key for authenticating sessions',\r\n        sessionLength: 60*60*24, // 24h time out\r\n        port: 8020,\r\n        messageId: 'chat-id', // incrementing unique id for messages\r\n        messageHash: 'chat-message', // prefix for redis chat message store\r\n        history: 'chat-history', // prefix for redis channel history\r\n        subscription: 'chat' // prefix for redis channel subscription\r\n    };\r\n\r\n\r\nREST API\r\n--------\r\n\r\nThe chat service also has a REST API. This can be used for:\r\n* Creating an HMAC from user, channel and issued stamp\r\n* Retrieving a channel's chat history for archival\r\n* Deleting part of a channel's chat history which has been archived (to free memory)\r\n\r\n\r\n#### HMAC\r\nThe path:\r\n<code>/hmac/salt/user_id/channel/issued_timestamp/</code>\r\nwill generate a base64 HMAC signature for a given salt (secret), given the user, channel and issued timestamp\r\n\r\nThis should be used over HTTPS, or as a reference implementation to ensure the secret salt is not stolen.\r\nThe signature is generated by combining the <code>user_id + '|' + channel + '|' + issued_timestamp</code> together (Note: | is used as a separator), which is passed through a SHA256 HMAC. The digest is read as base64.\r\n\r\n#### History\r\nThe path:\r\n<code>/history/channel</code>\r\nwill list the entire chat history buffer for the given channel as JSON.\r\n\r\n<code>/history/channel/10</code>\r\nwill list the 10 oldest history entries in the channel history buffer.\r\n\r\n----\r\n\r\nThis requires the same HMAC authentication via query string. e.g.\r\n<code>/history/channel?user=fred.flintstone&issued=1333333333337&signature=HMAC+HASH</code>\r\n\r\n<b>Note:</b> If a DELETE instead of a GET request is used, the history will be deleted.\r\n<code>/history/channel/10</code>\r\nwill delete the 10 oldest history entries in the buffer.\r\n\r\nFAQ\r\n----\r\n\r\n#### Why is it called Chatitat?\r\nI don't know. Can you think of a better name?\r\n\r\n#### Why aren't there more FAQs?\r\nNo-one has asked any questions yet.\r\n\r\n\r\n# Credits\r\nThis was loosely based off <a href=\"https://github.com/steffenwt/nodejs-pub-sub-chat-demo\">nodejs-pub-sub-chat-demo</a>.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}